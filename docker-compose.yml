version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: candidates-database
    ports:
      - "8800:5432"
    environment:
      - POSTGRES_DB=candidates
      - POSTGRES_USER=candidates_user
      - POSTGRES_PASSWORD=candidates_password
    labels:
      - "logging=enabled"
      - "service=database"
      - "app=candidates"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U candidates_user -d candidates"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # LocalStack for S3 emulation
  localstack:
    image: localstack/localstack:3.0
    container_name: candidates-localstack
    ports:
      - "4566:4566"  # LocalStack main port
      - "4510-4559:4510-4559"  # External service port range
    environment:
      - DEBUG=1
      - SERVICES=s3
      - DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - PERSISTENCE=1
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  # Backend service (NestJS API)
  backend:
    build:
      context: ./candidates-app
      dockerfile: Dockerfile
    container_name: candidates-backend
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - NODE_ENV=production
      - LOG_LEVEL=log
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=candidates
      - DATABASE_USER=candidates_user
      - DATABASE_PASSWORD=candidates_password
      - FILE_STORAGE_TYPE=s3
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - S3_BUCKET_NAME=candidates-files
    labels:
      - "logging=enabled"
      - "service=backend"
      - "app=candidates"
    depends_on:
      database:
        condition: service_healthy
      localstack:
        condition: service_healthy
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Frontend service (Angular + Nginx)
  frontend:
    build:
      context: ./candidates-webapp
      dockerfile: Dockerfile
    container_name: candidates-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: candidates-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - candidates-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: candidates-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - candidates-network
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: candidates-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - candidates-network
    restart: unless-stopped

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: candidates-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://candidates_user:candidates_password@database:5432/candidates?sslmode=disable
    depends_on:
      database:
        condition: service_healthy
    networks:
      - candidates-network
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: candidates-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: candidates-promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - candidates-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  localstack_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  candidates-network:
    driver: bridge
    name: candidates-network