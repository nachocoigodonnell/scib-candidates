version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: candidates-database
    ports:
      - "8800:5432"
    environment:
      - POSTGRES_DB=candidates
      - POSTGRES_USER=candidates_user
      - POSTGRES_PASSWORD=candidates_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U candidates_user -d candidates"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Backend service (NestJS API)
  backend:
    build:
      context: ./candidates-app
      dockerfile: Dockerfile
    container_name: candidates-backend
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - NODE_ENV=production
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=candidates
      - DATABASE_USER=candidates_user
      - DATABASE_PASSWORD=candidates_password
    depends_on:
      database:
        condition: service_healthy
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # Frontend service (Angular + Nginx)
  frontend:
    build:
      context: ./candidates-webapp
      dockerfile: Dockerfile
    container_name: candidates-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - candidates-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  candidates-network:
    driver: bridge
    name: candidates-network